% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wfs_eus_cp.R
\name{catreus_wfs_get_parcels_bbox}
\alias{catreus_wfs_get_parcels_bbox}
\title{Retrieve Parcel Data in Pais Vasco Based on Bounding Box Coordinates}
\usage{
catreus_wfs_get_parcels_bbox(x, srs = NULL, verbose = FALSE, count = NULL)
}
\arguments{
\item{x}{Bounding box coordinates or a spatial object, which could be:
\itemize{
\item A numeric vector of length 4 with the coordinates defining the bounding box:
\code{c(latitude1, longitude1, latitude2, longitude2)}.
\item An \code{sf/sfc} object from the \CRANpkg{sf} package.
}}

\item{srs}{Spatial Reference System (SRS) or Coordinate Reference System (CRS) code
to be used in the query. For best results, ensure the coordinates are in ETRS89
(EPSG:25830) or WGS84 (EPSG:4326) when using latitude and longitude.}

\item{verbose}{Logical; if \code{TRUE}, additional information about function operations
is printed. Useful for debugging. Default is \code{FALSE}.}

\item{count}{Integer specifying the maximum number of parcel records to return.
Default is 10.}
}
\value{
Depending on the input and geographic location, this function may return:
\itemize{
\item A message detailing the success of the query and the province fetched.
\item A warning message if the bounding box spans multiple provinces.
\item An error message if the coordinates are not within Pais Vasco.
}
}
\description{
This function fetches parcel data within a specified bounding box. It first checks if the provided coordinates are valid,
determines the province based on these coordinates using reverse geocoding, and fetches parcel data for
Bizkaia, Gipuzkoa, or Araba/√Ålava accordingly. It supports transformations between geographical and UTM coordinate systems,
handles multiple Coordinate Reference Systems (CRS), and manages different minimum counts for returned records.
}
\details{
The function uses reverse geocoding to identify the province within the Basque Country.
It delegates data fetching to province-specific functions, which handle data extraction based on the
provided geographic bounds. The function adapts dynamically to coordinate system inputs and provides options
for detailed logging to facilitate debugging and verification of operations.
}
\examples{
\donttest{

library(mapSpain)
library(dplyr)
library(sf)

# Define bounding box coordinates for an urban location in Gipuzkoa
coords_gipuzkoa <- c(582745.070132, 4795611.169048, 584249.337348, 4796830.604835)

# Fetch parcel data using the bounding box
parcels_gipuzkoa <- catreus_wfs_get_parcels_bbox(coords_gipuzkoa, srs = 25830)

library(ggplot2)
# Plot the parcels data
ggplot(parcels_gipuzkoa) +
  geom_sf() +
  ggtitle("Parcels Data for Gipuzkoa")

# Define bounding box coordinates for a location in Bizkaia
coords_bizkaia <- c(504218.816311, 4788948.595082, 505374.746026, 4789719.963173)

# Fetch parcel data using the bounding box
parcels_bizkaia <- catreus_wfs_get_parcels_bbox(coords_bizkaia, srs = 25830)

library(ggplot2)
# Plot the parcels data for Bizkaia
ggplot(parcels_bizkaia) +
  geom_sf() +
  ggtitle("Parcels Data for Bizkaia")



# Fetch parcel data using the bounding box
vitoria <- esp_get_capimun(munic = "Vitoria") \%>\%
  st_transform(4326) \%>\%
  st_buffer(300)

parcels_araba <- catreus_wfs_get_parcels_bbox(vitoria)
ggplot(parcels_araba) +
  geom_sf() +
  ggtitle("Parcels Data for Vitoria")
}

}
\seealso{
\code{\link[sf:st_bbox]{st_bbox}}, which is used to manage spatial bounding boxes.
}
