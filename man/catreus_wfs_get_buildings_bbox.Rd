% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wfs_eus_bu.R
\name{catreus_wfs_get_buildings_bbox}
\alias{catreus_wfs_get_buildings_bbox}
\title{Retrieve Building Data in Pais Vasco Based on Bounding Box Coordinates}
\usage{
catreus_wfs_get_buildings_bbox(x, srs = NULL, verbose = FALSE, count = NULL)
}
\arguments{
\item{x}{Bounding box coordinates or a spatial object, which could be:
\itemize{
\item A numeric vector of length 4 with the coordinates defining the bounding box:
\code{c(latitude1, longitude1, latitude2, longitude2)}.
\item An \code{sf/sfc} object from the \CRANpkg{sf} package.
}}

\item{srs}{Spatial Reference System (SRS) or Coordinate Reference System (CRS) code
to be used in the query. For best results, ensure the coordinates are in ETRS89
(EPSG:25830).}

\item{verbose}{Logical; if \code{TRUE}, additional information about function operations
is printed. Useful for debugging. Default is \code{FALSE}.}

\item{count}{Integer specifying the maximum number of building records to return.
Default is NULL.}
}
\value{
Depending on the input and geographic location, this function may return:
\itemize{
\item An \code{sf} object containing building data within the specified bbox.
\item A message indicating mismatched or out-of-region coordinates.
}
}
\description{
This function fetches buildings data within a specified bounding box. It first checks if the provided coordinates are valid,
determines the province based on these coordinates using reverse geocoding, and fetches buildings data for
Bizkaia, Gipuzkoa, or Araba/Álava accordingly. It supports transformations between geographical and UTM coordinate systems,
handles multiple Coordinate Reference Systems (CRS), and manages different minimum counts for returned records.
}
\details{
This function uses reverse geocoding to determine the province within the Basque Country
from the coordinates provided. Based on the province, it delegates the data fetching to
specific functions handling each province's data. It supports flexible input types and
handles geographical coordinate transformations internally if needed.
}
\examples{
\donttest{

library(mapSpain)
library(dplyr)
library(sf)

# Define bounding box coordinates for a location in Gipuzkoa
coords_gipuzkoa <- c(582181.399767, 4796308.387948, 583411.968522, 4797564.942348)

# Fetch building data using the bounding box
buildings_gipuzkoa <- catreus_wfs_get_buildings_bbox(coords_gipuzkoa, srs = 25830, count = 50)

library(ggplot2)
# Plot the buildings data
ggplot(buildings_gipuzkoa) +
  geom_sf() +
  ggtitle("Building Data for Gipuzkoa")

# Define bounding box coordinates for a location in Bizkaia
bilbao <- esp_get_capimun(munic = "Bilbao") \%>\%
  st_transform(25830) \%>\%
  st_buffer(300)
buildings_bilbao <- catreus_wfs_get_buildings_bbox(bilbao)
ggplot(buildings_bilbao) +
  geom_sf() +
  ggtitle("Buildings Data for Bilbao")

# Define bounding box coordinates for a rural location in Araba/Álava
coords_alaba <- c(525858.205755, 4742911.412803, 526701.543389, 4743398.976145)

# Fetch building data using the bounding box, requesting more features
buildings_alaba <- catreus_wfs_get_buildings_bbox(coords_alaba, srs = 25830)

library(ggplot2)
# Plot the buildings data for Araba/Álava
ggplot(buildings_alaba) +
  geom_sf() +
  ggtitle("Building Data for Araba")
}

}
\seealso{
\code{\link[sf:st_bbox]{st_bbox}}, which is used to manage spatial bounding boxes.
}
